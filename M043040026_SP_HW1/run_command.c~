/*
 * run_command.c :    do the fork, exec stuff, call other functions
 */

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <signal.h>
#include <errno.h>
#include <sys/wait.h>
#include <string.h>
#include "shell.h"

void run_command(char **myArgv) {
    pid_t pid;
    int stat=NULL;
    char *command=NULL;
    char *oneblock= " "; 
    char *test1="&";
    int i=0;
    
    command = (char *)realloc(command , sizeof(char)*200);
    /* Create a new child process.
     * Fill in code.
	 */
    pid = fork();
    switch (pid) {

        /* Error. */
        case -1 :
            perror("fork");
            exit(errno);

        /* Parent. */
        default :
            /* Wait for child to terminate.
             * Fill in code.
			 */
	    //sleep(1);
	    
		waitpid(pid,&stat,0);
	   

	    
            /* Optional: display exit status.  (See wstat(5).)
             * Fill in code.
			 */
	    printf("status = %d\n",stat);
	    /*if(WIFEXITED(stat)){
	        printf("WEXITSTAUS = %d\n",WEXITSTATUS(stat));
	    }*/
            return;

        /* Child. */
        case 0 :
            /* Run command in child process.
             * Fill in code.
			 */
	    

	    if(is_background(myArgv) == TRUE){
	 	while(myArgv[i] != NULL){
		    strcat(command,myArgv[i]);
		    strcat(command,oneblock);
		    i++;
		}
		system(command);
		perror("system");	
	    }

	    else{
		execvp(myArgv[0],myArgv);
		perror("execvp");
	    }
	    
	    

            /* Handle error return from exec */
			exit(errno);
    }
}
